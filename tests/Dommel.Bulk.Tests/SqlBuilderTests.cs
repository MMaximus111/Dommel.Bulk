using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Bogus.DataSets;
using Dommel.Bulk.Tests.Common;
using Newtonsoft.Json;
using Xunit;

namespace Dommel.Bulk.Tests;

public class SqlBuilderTests
{
    private readonly ISqlBuilder _sqlBuilder = new MySqlSqlBuilder();
    private readonly IReadOnlyList<Person>? _people;
    private readonly IReadOnlyList<AllTypesEntity>? _allTypes;

    public SqlBuilderTests()
    {
        _people = JsonConvert.DeserializeObject<Person[]>(File.ReadAllText("people.json"));
        _allTypes = JsonConvert.DeserializeObject<AllTypesEntity[]>(File.ReadAllText("all_types.json"));
    }

    [Fact]
    public void ParametersSqlBuilderPersonTest()
    {
        var sql = DommelBulkMapper.BuildInsertParametersQuery(_sqlBuilder, _people);

        Assert.Equal(@"INSERT INTO `people` (`ref`, `first_name`, `last_name`, `gender`, `age`, `birth_day`) VALUES
(@Ref_1, @FirstName_1, @LastName_1, @Gender_1, @Age_1, @BirthDay_1),
(@Ref_2, @FirstName_2, @LastName_2, @Gender_2, @Age_2, @BirthDay_2);", sql.Query);

        Assert.Equal(12, sql.Parameters.ParameterNames.Count());

        Assert.Equal(_people[0].Ref, sql.Parameters.Get<Guid>("Ref_1"));
        Assert.Equal(_people[0].FirstName, sql.Parameters.Get<string>("FirstName_1"));
        Assert.Equal(_people[0].LastName, sql.Parameters.Get<string>("LastName_1"));
        Assert.Equal(_people[0].Gender, sql.Parameters.Get<Name.Gender>("Gender_1"));
        Assert.Equal(_people[0].Age, sql.Parameters.Get<int>("Age_1"));
        Assert.Equal(_people[0].BirthDay, sql.Parameters.Get<DateTime>("BirthDay_1"));

        Assert.Equal(_people[1].Ref, sql.Parameters.Get<Guid>("Ref_2"));
        Assert.Equal(_people[1].FirstName, sql.Parameters.Get<string>("FirstName_2"));
        Assert.Equal(_people[1].LastName, sql.Parameters.Get<string>("LastName_2"));
        Assert.Equal(_people[1].Gender, sql.Parameters.Get<Name.Gender>("Gender_2"));
        Assert.Equal(_people[1].Age, sql.Parameters.Get<int>("Age_2"));
        Assert.Equal(_people[1].BirthDay, sql.Parameters.Get<DateTime>("BirthDay_2"));
    }

    [Fact]
    public void SqlBuilderPersonTest()
    {
        var sql = DommelBulkMapper.BuildInsertQuery(_sqlBuilder, _people);

        Assert.Equal(@"INSERT INTO `people` (`ref`, `first_name`, `last_name`, `gender`, `age`, `birth_day`) VALUES
('971af92c-f70e-4916-99e0-03c916cf8b70', 'Marcos', 'Hilll', 0, 46, '1952-04-18 19:32:19.440141'),
('e2265ba5-1f21-47d6-8b01-567a36684e07', 'Johnny', 'Ankunding', 0, 40, '1989-04-08 00:15:03.419836');", sql);
    }

    [Fact]
    public void ParametersSqlBuilderAllTypesTest()
    {
        var sql = DommelBulkMapper.BuildInsertParametersQuery(_sqlBuilder, _allTypes);

        Assert.Equal(@"INSERT INTO `AllTypesEntities` (`Id`, `Ref`, `Short`, `ShortNull`, `UShort`, `UShortNull`, `Int`, `IntNull`, `UInt`, `UIntNull`, `Long`, `LongNull`, `ULong`, `ULongNull`, `Decimal`, `DecimalNull`, `Float`, `FloatNull`, `Double`, `DoubleNull`, `Byte`, `ByteNull`, `SByte`, `SByteNull`, `Bool`, `BoolNull`, `Char`, `CharNull`, `String`, `StringNull`, `Enum`, `EnumNull`, `DateTime`, `DateTimeNull`, `DateTimeOffset`, `DateTimeOffsetNull`, `TimeSpan`, `TimeSpanNull`, `ByteArray`, `ByteArrayNull`) VALUES
(@Id_1, @Ref_1, @Short_1, @ShortNull_1, @UShort_1, @UShortNull_1, @Int_1, @IntNull_1, @UInt_1, @UIntNull_1, @Long_1, @LongNull_1, @ULong_1, @ULongNull_1, @Decimal_1, @DecimalNull_1, @Float_1, @FloatNull_1, @Double_1, @DoubleNull_1, @Byte_1, @ByteNull_1, @SByte_1, @SByteNull_1, @Bool_1, @BoolNull_1, @Char_1, @CharNull_1, @String_1, @StringNull_1, @Enum_1, @EnumNull_1, @DateTime_1, @DateTimeNull_1, @DateTimeOffset_1, @DateTimeOffsetNull_1, @TimeSpan_1, @TimeSpanNull_1, @ByteArray_1, @ByteArrayNull_1),
(@Id_2, @Ref_2, @Short_2, @ShortNull_2, @UShort_2, @UShortNull_2, @Int_2, @IntNull_2, @UInt_2, @UIntNull_2, @Long_2, @LongNull_2, @ULong_2, @ULongNull_2, @Decimal_2, @DecimalNull_2, @Float_2, @FloatNull_2, @Double_2, @DoubleNull_2, @Byte_2, @ByteNull_2, @SByte_2, @SByteNull_2, @Bool_2, @BoolNull_2, @Char_2, @CharNull_2, @String_2, @StringNull_2, @Enum_2, @EnumNull_2, @DateTime_2, @DateTimeNull_2, @DateTimeOffset_2, @DateTimeOffsetNull_2, @TimeSpan_2, @TimeSpanNull_2, @ByteArray_2, @ByteArrayNull_2);",
            sql.Query);

        Assert.Equal(80, sql.Parameters.ParameterNames.Count());
    }

    [Fact]
    public void SqlBuilderAllTypesTest()
    {
        var sql = DommelBulkMapper.BuildInsertQuery(_sqlBuilder, _allTypes);

        Assert.Equal(@"INSERT INTO `AllTypesEntities` (`Id`, `Ref`, `Short`, `ShortNull`, `UShort`, `UShortNull`, `Int`, `IntNull`, `UInt`, `UIntNull`, `Long`, `LongNull`, `ULong`, `ULongNull`, `Decimal`, `DecimalNull`, `Float`, `FloatNull`, `Double`, `DoubleNull`, `Byte`, `ByteNull`, `SByte`, `SByteNull`, `Bool`, `BoolNull`, `Char`, `CharNull`, `String`, `StringNull`, `Enum`, `EnumNull`, `DateTime`, `DateTimeNull`, `DateTimeOffset`, `DateTimeOffsetNull`, `TimeSpan`, `TimeSpanNull`, `ByteArray`, `ByteArrayNull`) VALUES
('aed35796-3462-cf11-abc9-8f4bb383070b', '51165bf2-d9b9-25f0-35aa-b61feac477ee', -17084, NULL, 49233, 5778, 1007865200, NULL, 361619009, 1840038885, -3381095505472851184, -1840330474280982528, 4045215493295386624, NULL, 0.05535433864779650, 0.6653645810681940, 0.192999706, NULL, 0.80130711733315385, 0.86701345184901812, 107, 191, 54, NULL, 1, 1, '儔', NULL, NULL, NULL, 5, 3, '2022-03-19 14:11:09.779916', NULL, '2022-03-18 19:50:21.818354+02:00', '2022-04-23 01:26:30.988390+02:00', '111:40:15.760806', NULL, 0xC5A0E328C7319CCBF4A5104AD37B31DBFA69D3E268135F0113F7AE6B5339518E2D5736E001BBD7456104E716A3937DD184C164885F225C16640D3C9AECA34087F19A598790ED29ECCBDC829919C5F7B98271A3D88FA1E084DE4E973B6EF60F4EE7CB384742854B78900AC3695F6863768CF2197B20B82583E2B45A1EDBB125F439B8D66DA891EF11B58B8B3CAB4E09FF2BD839F2FC63362743375AD57749B4B0D8C994161C9501149B4E3B0CFA5826AEB7C6EBA007F6F5B946EF92A39AE15E5D6398D5E4AF5F161BB26DB348128126CE5D08568602085BD4381DCC4641D1D59B1A870B454E11DA268E78E9AEC1B29227015BFA1F198FDB1DB06DEBD48B5027D223308924A6C31ACE72594F19233185E60F8A3310F845BA6053B79ECC8CE228C3B5CE09D253171992E94C8E9F831EAFE6BD547A52308E2BE7BFAE2DD1AC6AC1842A7BECA5F431BF139DFB783A4BC3B4655C13CE0939D151EE706BB6F66B2E4C75EA836A9FFB9CE6A017B281AF096AE4308F7DD0FE4A84CD65E6F60D0CFED11B699040080CA835A0363BAF217B4A4B0F6EC000BAF39B0FFA5559ADDAD7454D5726DB1C605C6F05DAFE9D41291E28E48DDA9DCCFAB3D4586AA8244A496AD081E33A4099AA06D05580E18D5934FAC1B06187C3E7BD8751573B7CFEEA7172BABDB905AC05C04401F7033DDDE55D4CDFAE4C46314C34D99B89F6E8137968C39F69A07ED5775A8C2E13A9222A2D96CDA9365F156B85C0AD02BCB38D5553D65486DD4DCDD0E219E39015880AF99ABCC875BF1150CB5102077DCF608D9020691FD7C2EEDEE690393420B76B1065AA9342E0CC0E9E65A84BB96DB728A175E98AB6D17EDD081AFBA5372B5E876035EBDD1BBEEE019D9553E0432192BAD02BC54BB528BAD249298BBCA52BFAF5A1424AED3C3AE8F12B4E6E86FFBB0CB2F5DC2A798E2740942BDE04B443A98AD42947E65991A0F641E078FF957B7C026377755216E29341F0A90BEFC5C1CE7E5C009A9CA1DA347E1C3B0ABD40D3FF7D3B28C931DFCDDC4E2AE3E96C25D95691CB23EC68D609231842D182A804700EAC4D13B05F219D8596F90EC1B5B4CEB320B957021AD802FA6EC0425E6B51CB742F3A386680186AC3156E8BC056C00A61A190ECF53A9C93AC2E80DBDEEC03A3D8EE52BE55351D1ACCDF2382F5F8807B1311EECC5AF7A13E720EFACAA865BA21C3E9FFEE5640659454E0610DC2D76DB4DE9923DDFCA1DED251F73FF8EFC7459FA4E3168F8C3774A8E699140EFED850C2F7F08B9A7DEC90B3B88EBB73540144698B4BA870D9237BF41038A68A40EAD8AEE393ACAB40913ADAC592A27A3499B86FB225C75C05A6AF9F239BCB01AAE0E84E85785EBA784EB386664B10C93C8F9C1BD3A36094DFC7B9B741920D737E16DD5E219FC9C1, 0x
('78646df8-9c27-1572-6ac3-0dbf216cb4f3', '10079e41-a3e4-75ff-bcd2-053a04a33a88', -31925, NULL, 12507, 38595, -1243668567, NULL, 1382782515, NULL, -3087096581176634022, 1578508211703644570, 12091159821409646592, 658054436413290496, 0.4827388352787690, 0.09229320173773420, 0.930997133, NULL, 0.75805399142956631, 0.97796885287437718, 164, NULL, -10, -113, 0, NULL, '嵅', '嗈', NULL, NULL, 6, 1, '2022-03-19 17:01:29.458386', '2022-04-04 08:22:27.084511', '2022-03-19 11:44:40.086632+02:00', '2022-04-26 10:47:21.621928+02:00', '149:54:37.430252', NULL, 0x34A384820734FB2CBBC248128F19487A3E0F378E240AF72045AB330D6B08811C7C32DA56B65ECE58897C1C4438B056843231813C9D9CB5BCA5333A1269758FEFBC5AB1E8EABAD3C9D663CF5A52A07D836719357E35A19B9971004DC49F56B77D42B41957770F5849A7402AAE21EED77192BEFF8711A1088AF7B3FB0ED772C4E6D4912E3FA39BAE02FAB8221D7EFDC6356F004A12A157003C3030C5B3E62740C8DABBE5B47D85E793C9F3C234F2BCB858160A3F306E8397416D113AE86D6E51C71A2B3774AF88D005AF79246E46976C889D532442059E1F8B1718D16D942A8AAABD3B1523DCB94CDF3CD220DA18F83DB5CAE55014976F113D20FF77F4E4946B2EEBA74CC062A984805700F2513E8CA0092A71B961E2DE1C3D2F1123924C7DB9715FC277A6861965C33E1E7915E7E18E66417AD25E1E21B004AE380C875AE443C4EEF1DB8D503464CBD91B29F19FBF357099A86FE23278455951D6759F032FB7B3CF6F014C523F2C186A87D9820FA8FF1412C576E30CA37BB2EA136BD55BBF97DD13ECEE57CBF6C29179635FD1D1822C8491140A3FF7D769C5079B78AA705F02640C42D552C6074A0794EF32D54FA7A32F3F899AC0162690D7C76668E42291C6EBEC82CBD2DBE15AE76747F5BD814247AAC541680906483FC8A2AE075735A86F8B2A712A5EB52B933F39CB163000A6B7084BFDB6460458839FA7499338646605761251E97A811528A7685A76CC4A3D4A565F7F73C8FA632E5679C1C3B4856D6A92A770DA3A2E898FC9894776467880D9FF51F0182F424C3908CD9E81CCBAB3EB5882FD3DC2D0B430FA91A2F3CF6E89B5884238DFB9A3A94EBDEDB299B297DE60F83182AC5D538297E438FE20BA8C50A18858E87DCB6C1B06C4F9EFED0D8A4517334441290649482DE13BCFCAC2BC205EAF2327DF3B6A5D69E82BE5EFDAD3B9D35315ACF1102AD949924C572FF3D7F92871E67E8B32F2BFD18DC788EDF36B9688CDD1CAB2E89DD1528A979D6B10F7DB152B93F36486D917824CA9CB49449D6E7F47AFBA1E46EABE5052439EA29AF876F5BA22F4160FA603DDC1C5D6159F72B9DA7DA47816B5F678CA66C7C03DF6648F411D9921DF91B6AD7B9604A9C23FB1FE56D1D4F8CB5B21E3B71AC2E8A5896EA5D491AB77D793D4AECC7403CA840361D9FC4732B64F2D45F68070CBDED21A938CE19E4A4B893C945733FA642BAF0D82765FA0FE67DA5C38C42584B4867F61414555C2F50E8CE7BB6363D148E62985B1A3BFA1D8759C14C35C6564782F691824E7BFC0AE59A154564140109E9B48D8F2CE715594EF56F1C0820C512F720FB99D7D3E50A8AE40D910E194A774D9E016431F67EAFAAB5AC35C7C781179AFF888961A5398125460966F368A8DFA8E82A92C105635B5D5A4CF97711959, 0x
            sql);
    }
}